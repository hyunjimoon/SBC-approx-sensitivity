mean((y-y_hat)^2)
}
writeLines(readLines('models/gp_hp/gp_hp.stan'))
modelName <- "gp_hp"
sf_hp <- gp_fit(modelName, data)
rsf_hp <- read_stan_csv(sf_hp$output_files())
setwd("~/Dropbox/20_paper/reliability_prediction/gaussianprocess")
util <- new.env()
source('stan_utility.R', local=util)
source('gp_utility.R', local=util)
library(rstan); library(cmdstanr); library(parallel); library("tidyverse")
#setwd("C:/Users/serim/Documents/academic/Bayes_Study/gp/gp")
#setwd(getwd())
set.seed(1954)
.libPaths("~/Rlib")
options(mc.cores = parallel::detectCores())
util <- new.env()
source('stan_utility.R', local=util)
source('gp_utility.R', local=util)
c_light <- c("#DCBCBC")
c_light_highlight <- c("#C79999")
c_mid <- c("#B97C7C")
c_mid_highlight <- c("#A25050")
c_dark <- c("#8F2727")
c_dark_highlight <- c("#7C0000")
c_light_trans <- c("#DCBCBC80")
c_light_highlight_trans <- c("#C7999980")
c_mid_trans <- c("#B97C7C80")
c_mid_highlight_trans <- c("#A2505080")
c_dark_trans <- c("#8F272780")
c_dark_highlight_trans <- c("#7C000080")
c_light_teal="#6B8E8E"
c_mid_teal="#487575"
c_dark_teal="#1D4F4F"
c_green_trans <- c("#00FF0080")
c_superfine <- c("#8F272705")
println <- function(msg) cat(msg); cat("\n")
printf <- function(pattern, ...) println(sprintf(pattern, ...))
print_file <- function(file) println(readLines(file))
scriptDir <- getwd()
modelDir <- file.path(scriptDir, "models")
dataDir <- file.path(scriptDir, "data")
gp_fit <- function(modelName, data){
chains <- 4
parallel_chains <- min(chains, detectCores())
scriptDir <- getwd()
delivDir <- file.path(scriptDir, "deliv", modelName)
prefit <- file.path(delivDir, paste0(modelName, ".rda"))
stanfile <- file.path(modelDir, modelName, paste0(modelName, ".stan"))
if (file.exists(prefit)){
fit <- readRDS(prefit)
}else{
mod <- cmdstan_model(stanfile, quiet = FALSE)
fit <- mod$sample(data, chains = chains, iter_warmup = 500, iter_sampling = 500,
parallel_chains = parallel_chains, save_warmup = FALSE)
dir.create(delivDir)
fit$save_object(file = prefit)
}
fit
}
div_detect <- function(stanfit){
partition <- util$partition_div(stanfit)
div_samples <- partition[[1]]
nondiv_samples <- partition[[2]]
par(mfrow=c(1, 3))
plot(nondiv_samples$length_GP_engine, nondiv_samples$sigma_GP_engine, log="xy",
col=c_dark_trans, pch=16, cex=0.8, xlab="length_GP_engine", ylab="sigma_GP_engine")
points(div_samples$length_GP_engine, div_samples$sigma_GP_engine,
col=c_green_trans, pch=16, cex=0.8)
plot(nondiv_samples$length_GP_engine, nondiv_samples$sigma_error_ship,
col=c_dark_trans, pch=16, cex=0.8, xlab="length_GP_engine", ylab="sigma_error_ship")
points(div_samples$length_GP_engine, div_samples$sigma_error_ship,
col=c_green_trans, pch=16, cex=0.8)
plot(nondiv_samples$length_GP_engine, nondiv_samples$length_engine_scale,
col=c_dark_trans, pch=16, cex=0.8, xlab="length_GP_engine", ylab="length_engine_scale")
points(div_samples$length_GP_engine, div_samples$length_engine_scale,
col=c_green_trans, pch=16, cex=0.8)
}
N_engines <- 5
N_ships <- 99
N_ages <- 31
N_ages_obs <- 31
ship_engine_ind <- read.csv("data/engine.csv")$engine
ship_ind <- read.csv("data/ship_index.csv")$X0
age_ind <- read.csv("data/x_age.csv", header = FALSE)[-1,1]
y <- read.csv("data/y_count_pwr.csv", header = FALSE)[,1]
data <- list(N = length(y), N_engines=N_engines,N_ships = N_ships, N_ages= N_ages, N_ages_obs = N_ages_obs,
ship_engine_ind =ship_engine_ind, ship_ind = ship_ind, age_ind = age_ind, y=y)
mseNplot <- function(x, y){
yhat<- x %>%
filter(str_detect(variable, "y_new_pred")) %>%
pull(mean)
yhatmat<- (matrix(yhat, nrow = 31, ncol = 99))
y_hat <- rep(NA, length(y))
for (i in 1:length(y)){
y_hat[i] <- yhatmat[age_ind[i],ship_ind[i]]
}
par(mfrow=c(1,1))
plot(1, type="n",xlim=c(0,31),ylim=c(-2,3),xlab="age",ylab="scaled failure time")
for (n in 1:653){
points(age_ind[n],y[n],col="black",pch=16)
points(age_ind[n],y_hat[n],col="blue")
}
mean((y-y_hat)^2)
}
writeLines(readLines('models/gp_hp/gp_hp.stan'))
modelName <- "gp_hp"
sf_hp <- gp_fit(modelName, data)
rsf_hp <- read_stan_csv(sf_hp$output_files())
util <- new.env()
source('stan_utility.R', local=util)
source('gp_utility.R', local=util)
library(rstan); library(cmdstanr); library(parallel); library("tidyverse")
#setwd("C:/Users/serim/Documents/academic/Bayes_Study/gp/gp")
#setwd(getwd())
set.seed(1954)
.libPaths("~/Rlib")
options(mc.cores = parallel::detectCores())
util <- new.env()
source('stan_utility.R', local=util)
source('gp_utility.R', local=util)
c_light <- c("#DCBCBC")
c_light_highlight <- c("#C79999")
c_mid <- c("#B97C7C")
c_mid_highlight <- c("#A25050")
c_dark <- c("#8F2727")
c_dark_highlight <- c("#7C0000")
c_light_trans <- c("#DCBCBC80")
c_light_highlight_trans <- c("#C7999980")
c_mid_trans <- c("#B97C7C80")
c_mid_highlight_trans <- c("#A2505080")
c_dark_trans <- c("#8F272780")
c_dark_highlight_trans <- c("#7C000080")
c_light_teal="#6B8E8E"
c_mid_teal="#487575"
c_dark_teal="#1D4F4F"
c_green_trans <- c("#00FF0080")
c_superfine <- c("#8F272705")
println <- function(msg) cat(msg); cat("\n")
printf <- function(pattern, ...) println(sprintf(pattern, ...))
print_file <- function(file) println(readLines(file))
scriptDir <- getwd()
modelDir <- file.path(scriptDir, "models")
dataDir <- file.path(scriptDir, "data")
gp_fit <- function(modelName, data){
chains <- 4
parallel_chains <- min(chains, detectCores())
scriptDir <- getwd()
delivDir <- file.path(scriptDir, "deliv", modelName)
prefit <- file.path(delivDir, paste0(modelName, ".rda"))
stanfile <- file.path(modelDir, modelName, paste0(modelName, ".stan"))
if (file.exists(prefit)){
fit <- readRDS(prefit)
}else{
mod <- cmdstan_model(stanfile, quiet = FALSE)
fit <- mod$sample(data, chains = chains, iter_warmup = 500, iter_sampling = 500,
parallel_chains = parallel_chains, save_warmup = FALSE)
dir.create(delivDir)
fit$save_object(file = prefit)
}
fit
}
div_detect <- function(stanfit){
partition <- util$partition_div(stanfit)
div_samples <- partition[[1]]
nondiv_samples <- partition[[2]]
par(mfrow=c(1, 3))
plot(nondiv_samples$length_GP_engine, nondiv_samples$sigma_GP_engine, log="xy",
col=c_dark_trans, pch=16, cex=0.8, xlab="length_GP_engine", ylab="sigma_GP_engine")
points(div_samples$length_GP_engine, div_samples$sigma_GP_engine,
col=c_green_trans, pch=16, cex=0.8)
plot(nondiv_samples$length_GP_engine, nondiv_samples$sigma_error_ship,
col=c_dark_trans, pch=16, cex=0.8, xlab="length_GP_engine", ylab="sigma_error_ship")
points(div_samples$length_GP_engine, div_samples$sigma_error_ship,
col=c_green_trans, pch=16, cex=0.8)
plot(nondiv_samples$length_GP_engine, nondiv_samples$length_engine_scale,
col=c_dark_trans, pch=16, cex=0.8, xlab="length_GP_engine", ylab="length_engine_scale")
points(div_samples$length_GP_engine, div_samples$length_engine_scale,
col=c_green_trans, pch=16, cex=0.8)
}
N_engines <- 5
N_ships <- 99
N_ages <- 31
N_ages_obs <- 31
ship_engine_ind <- read.csv("data/engine.csv")$engine
ship_ind <- read.csv("data/ship_index.csv")$X0
age_ind <- read.csv("data/x_age.csv", header = FALSE)[-1,1]
y <- read.csv("data/y_count_pwr.csv", header = FALSE)[,1]
data <- list(N = length(y), N_engines=N_engines,N_ships = N_ships, N_ages= N_ages, N_ages_obs = N_ages_obs,
ship_engine_ind =ship_engine_ind, ship_ind = ship_ind, age_ind = age_ind, y=y)
mseNplot <- function(x, y){
yhat<- x %>%
filter(str_detect(variable, "y_new_pred")) %>%
pull(mean)
yhatmat<- (matrix(yhat, nrow = 31, ncol = 99))
y_hat <- rep(NA, length(y))
for (i in 1:length(y)){
y_hat[i] <- yhatmat[age_ind[i],ship_ind[i]]
}
par(mfrow=c(1,1))
plot(1, type="n",xlim=c(0,31),ylim=c(-2,3),xlab="age",ylab="scaled failure time")
for (n in 1:653){
points(age_ind[n],y[n],col="black",pch=16)
points(age_ind[n],y_hat[n],col="blue")
}
mean((y-y_hat)^2)
}
writeLines(readLines('models/gp_hp/gp_hp.stan'))
modelName <- "gp_hp"
sf_hp <- gp_fit(modelName, data)
library(ggplot2)
theme_set(theme_minimal())
library(tidyr)
library(ggforce)
library(MASS)
library(rprojroot)
library(rstan)
root<-has_file(".BDA_R_demos_root")$make_fix_file()
y1 <- 0
y2 <- 0
r <- 0.99
S <- diag(2)
S[1, 2] <- r
S[2, 1] <- r
y1 <- 0
y2 <- 0
r <- 0.99
S <- diag(2)
S[1, 2] <- r
S[2, 1] <- r
fit <- stan(file = "/Users/hyunjimoon/Dropbox/20_paper/SBC_sensitivity/script/models/normal-sbc/normal-sbc.stan", data = list(N = 10, a = 1.0, b = 1.0), chains = 1)
setwd("~/Dropbox/20_paper/SBC_sensitivity/script")
library(rstan); library(cmdstanr); library(parallel); library("tidyverse"); library(dplyr)
setwd("C:/Users/serim/Documents/academic/Bayes_Study/gp/gp")
#setwd(getwd())
set.seed(1954)
.libPaths("~/Rlib")
options(mc.cores = parallel::detectCores())
source(file.path("tools", "cmdStanTools.r"))
source(file.path("tools", "sbcTools.r"))
c_light <- c("#DCBCBC")
c_light_highlight <- c("#C79999")
c_mid <- c("#B97C7C")
c_mid_highlight <- c("#A25050")
c_dark <- c("#8F2727")
c_dark_highlight <- c("#7C0000")
c_light_trans <- c("#DCBCBC80")
c_light_highlight_trans <- c("#C7999980")
c_mid_trans <- c("#B97C7C80")
c_mid_highlight_trans <- c("#A2505080")
c_dark_trans <- c("#8F272780")
c_dark_highlight_trans <- c("#7C000080")
c_light_teal="#6B8E8E"
c_mid_teal="#487575"
c_dark_teal="#1D4F4F"
c_green_trans <- c("#00FF0080")
c_superfine <- c("#8F272705")
println <- function(msg) cat(msg); cat("\n")
printf <- function(pattern, ...) println(sprintf(pattern, ...))
print_file <- function(file) println(readLines(file))
stanfile <- function(modelName){
scriptDir <- getwd()
delivDir <- file.path(scriptDir, "deliv", modelName)
prefit <- file.path(delivDir, paste0(modelName, ".rds"))
stanfile <- file.path(modelDir, modelName, paste0(modelName, ".stan"))
stanfile
}
fit <- stan(stanfile, data = list(), chains = 1)
library(rstan); library(cmdstanr); library(parallel); library("tidyverse"); library(dplyr)
setwd("C:/Users/serim/Documents/academic/Bayes_Study/gp/gp")
#setwd(getwd())
set.seed(1954)
.libPaths("~/Rlib")
options(mc.cores = parallel::detectCores())
source(file.path("tools", "cmdStanTools.r"))
source(file.path("tools", "sbcTools.r"))
c_light <- c("#DCBCBC")
c_light_highlight <- c("#C79999")
c_mid <- c("#B97C7C")
c_mid_highlight <- c("#A25050")
c_dark <- c("#8F2727")
c_dark_highlight <- c("#7C0000")
c_light_trans <- c("#DCBCBC80")
c_light_highlight_trans <- c("#C7999980")
c_mid_trans <- c("#B97C7C80")
c_mid_highlight_trans <- c("#A2505080")
c_dark_trans <- c("#8F272780")
c_dark_highlight_trans <- c("#7C000080")
c_light_teal="#6B8E8E"
c_mid_teal="#487575"
c_dark_teal="#1D4F4F"
c_green_trans <- c("#00FF0080")
c_superfine <- c("#8F272705")
println <- function(msg) cat(msg); cat("\n")
printf <- function(pattern, ...) println(sprintf(pattern, ...))
print_file <- function(file) println(readLines(file))
stanfile <- function(modelName){
scriptDir <- getwd()
delivDir <- file.path(scriptDir, "deliv", modelName)
prefit <- file.path(delivDir, paste0(modelName, ".rds"))
stanfile <- file.path(modelDir, modelName, paste0(modelName, ".stan"))
print(stanfile)
return(stanfile)
}
modelName <- "normal_sbc"
fit <- stan(file = stanfile(modelName), data = list(), chains = 1)
setwd("~/Dropbox/20_paper/SBC_sensitivity/script")
fit <- stan(file = stanfile(modelName), data = list(), chains = 1)
getwd()
cmdstanr_model <- cmdstan_model(stan_file = "/Users/hyunjimoon/Dropbox/20_paper/SBC_sensitivity/script/models/normal-sbc/normal-sbc.stan")
file <-
fit <- stan(file = "/Users/hyunjimoon/Dropbox/20_paper/SBC_sensitivity/script/models/normal-sbc/normal-sbc.stan", data = list(N = 10, a = 1.0, b = 1.0), chains = 1)
cmdstanr_model$sample(data = list(N = 10, a = 1.0, b = 1.0), chains = 1)
scriptDir <- getwd()
modelDir <- file.path(scriptDir, "models")
dataDir <- file.path(scriptDir, "data")
rstanfit <- function(modelName, data, chains){
chains <- 4
parallel_chains <- min(chains, detectCores())
scriptDir <- getwd()
delivDir <- file.path(scriptDir, "deliv", modelName)
prefit <- file.path(delivDir, paste0(modelName, ".rds"))
stanfile <- file.path(modelDir, modelName, paste0(modelName, ".stan"))
print(stanfile)
if (file.exists(prefit)){
print(prefit)
fit <- readRDS(prefit)
}else{
fit <- stan(file = stanfile, data = data, chains = chains)
#dir.create(delivDir)
save(fit, file=prefit)
}
fit
}
fit <- rstanfit(modelName, data = list(N = 10, a = 1.0, b = 1.0), chains = 1)
library(ggplot2); library(knitr); library(rstan);  library(tufte)
options(digits = 2);  options(htmltools.dir.version = FALSE)
println <- function(msg) { cat(msg); cat("\n") }
printf <- function(pattern, ...) println(sprintf(pattern, ...))
print_file <- function(file) cat(paste(readLines(file), "\n", sep=""), sep="")
test_uniform_ranks <- function(y, max_rank, bins = 20) {
if (max_rank / bins != floor(max_rank / bins)) {
printf("ERROR in test_uniform_ranks")
printf("  max rank must be divisible by bins.")
printf("  found max rank = %d;  bins = %d", max_rank, bins)
return(NA)
}
printf("Y")
print(y)
bin_size <- max_rank / bins
bin_count <- rep(0, bins)
N <- length(y)
for (n in 1:N) {
bin <- ceiling(y[n] / bin_size)
bin_count[bin] <- bin_count[bin] + 1
}
printf("BIN COUNTS")
print(bin_count)
chisq.test(bin_count)$p.value
}
num_monitored_params <- function(model, data = list()) {
fit <- sampling(model, data = data,
iter = 1, chains = 1, warmup = 0,
refresh = 0, seed = 1234)
fit@par_dims$I_lt_sim
}
sbc <- function(model, data = list(),
sbc_sims = 1000, stan_sims = 999,
init_thin = 4, max_thin = 64,
target_n_eff = 0.8 * stan_sims) {
num_params <- num_monitored_params(model, data)
ranks <- matrix(nrow = sbc_sims, ncol = num_params)
thins <- rep(NA, sbc_sims)
print("sbc_sims")
print(sbc_sims)
for (n in 1:sbc_sims) {
n_eff <- 0
thin <- init_thin
print("thin")
print(thin)
while (TRUE) {
fit <- sampling(model,
data = data,
chains = 1,
iter = 2 * thin * stan_sims,
thin = thin,
control = list(adapt_delta = 0.99),
refresh = 0)
fit_summary <- summary(fit, pars = c("lp__"), probs = c())$summary
n_eff <- fit_summary["lp__", "n_eff"]
if (n_eff >= target_n_eff || (2 * thin) > max_thin) break;
thin <- 2 * thin
}
thins[n] <- thin
printf("n = %5d;  thin = %4d;  n_eff = %5.0f", n, thin, n_eff)
lt_sim <- extract(fit)$I_lt_sim
for (i in 1:num_params)
ranks[n, i] <- sum(lt_sim[ , i]) + 1
}
printf("RANKS")
print(ranks)
pval <- rep(NA, num_params)
for (i in 1:num_params)
pval[i] <- test_uniform_ranks(ranks[ , i],
max_rank = stan_sims + 1)
list(rank = ranks, p_value = pval, thin = thins)
}
model <- stan_model("normal-sbc.stan")
result <- sbc(model, data = list(), sbc_sims = 20, stan_sims = 999,
max_thin = 64)
cmdstanr_model <- cmdstan_model(stan_file = "/Users/hyunjimoon/Dropbox/20_paper/SBC_sensitivity/script/models/normal-sbc/normal-sbc.stan")
file <-
fit <- stan(file = "/Users/hyunjimoon/Dropbox/20_paper/SBC_sensitivity/script/models/normal-sbc/normal-sbc.stan", data = list(N = 10, a = 1.0, b = 1.0), chains = 1)
cmdstanr_model$sample(data = list(N = 10, a = 1.0, b = 1.0), chains = 1)
scriptDir <- getwd()
modelDir <- file.path(scriptDir, "models")
dataDir <- file.path(scriptDir, "data")
rstanfit <- function(modelName, data, chains){
chains <- 4
parallel_chains <- min(chains, detectCores())
scriptDir <- getwd()
delivDir <- file.path(scriptDir, "deliv", modelName)
prefit <- file.path(delivDir, paste0(modelName, ".rds"))
stanfile <- file.path(modelDir, modelName, paste0(modelName, ".stan"))
print(stanfile)
if (file.exists(prefit)){
print(prefit)
fit <- readRDS(prefit)
}else{
fit <- stan(file = stanfile, data = data, chains = chains)
#dir.create(delivDir)
save(fit, file=prefit)
}
fit
}
fit <- rstanfit(modelName, data = list(N = 10, a = 1.0, b = 1.0), chains = 1)
library(ggplot2); library(knitr); library(rstan);  library(tufte)
options(digits = 2);  options(htmltools.dir.version = FALSE)
println <- function(msg) { cat(msg); cat("\n") }
printf <- function(pattern, ...) println(sprintf(pattern, ...))
print_file <- function(file) cat(paste(readLines(file), "\n", sep=""), sep="")
test_uniform_ranks <- function(y, max_rank, bins = 20) {
if (max_rank / bins != floor(max_rank / bins)) {
printf("ERROR in test_uniform_ranks")
printf("  max rank must be divisible by bins.")
printf("  found max rank = %d;  bins = %d", max_rank, bins)
return(NA)
}
printf("Y")
print(y)
bin_size <- max_rank / bins
bin_count <- rep(0, bins)
N <- length(y)
for (n in 1:N) {
bin <- ceiling(y[n] / bin_size)
bin_count[bin] <- bin_count[bin] + 1
}
printf("BIN COUNTS")
print(bin_count)
chisq.test(bin_count)$p.value
}
num_monitored_params <- function(model, data = list()) {
fit <- sampling(model, data = data,
iter = 1, chains = 1, warmup = 0,
refresh = 0, seed = 1234)
fit@par_dims$I_lt_sim
}
sbc <- function(model, data = list(),
sbc_sims = 1000, stan_sims = 999,
init_thin = 4, max_thin = 64,
target_n_eff = 0.8 * stan_sims) {
num_params <- num_monitored_params(model, data)
ranks <- matrix(nrow = sbc_sims, ncol = num_params)
thins <- rep(NA, sbc_sims)
print("sbc_sims")
print(sbc_sims)
for (n in 1:sbc_sims) {
n_eff <- 0
thin <- init_thin
print("thin")
print(thin)
while (TRUE) {
fit <- sampling(model,
data = data,
chains = 1,
iter = 2 * thin * stan_sims,
thin = thin,
control = list(adapt_delta = 0.99),
refresh = 0)
fit_summary <- summary(fit, pars = c("lp__"), probs = c())$summary
n_eff <- fit_summary["lp__", "n_eff"]
if (n_eff >= target_n_eff || (2 * thin) > max_thin) break;
thin <- 2 * thin
}
thins[n] <- thin
printf("n = %5d;  thin = %4d;  n_eff = %5.0f", n, thin, n_eff)
lt_sim <- extract(fit)$I_lt_sim
for (i in 1:num_params)
ranks[n, i] <- sum(lt_sim[ , i]) + 1
}
printf("RANKS")
print(ranks)
pval <- rep(NA, num_params)
for (i in 1:num_params)
pval[i] <- test_uniform_ranks(ranks[ , i],
max_rank = stan_sims + 1)
list(rank = ranks, p_value = pval, thin = thins)
}
model <- stan_model("normal-sbc.stan")
result <- sbc(model, data = list(), sbc_sims = 20, stan_sims = 999,
max_thin = 64)
fit <- stan(file = stanfile(modelName), data = list(), chains = 1)
